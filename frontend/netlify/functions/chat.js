exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  try {
    const body = JSON.parse(event.body || '{}');
    const { message, conversation_id, messageHistory = [] } = body;
    
    console.log('Message:', message);
    console.log('Conversation ID:', conversation_id);
    console.log('Message History Length:', messageHistory.length);

    // Groq API ile ger√ßek AI yanƒ±tƒ± al
    const groqApiKey = process.env.GROQ_API_KEY;
    
    if (!groqApiKey) {
      console.log('‚ö†Ô∏è GROQ_API_KEY not found, using fallback');
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({
          conversation_id: conversation_id,
          message: "‚ö†Ô∏è AI servisi ≈üu anda kullanƒ±lamƒ±yor. L√ºtfen daha sonra tekrar deneyin.",
          timestamp: new Date().toISOString(),
          used_api: 'fallback-no-key'
        }),
      };
    }

    // Groq API √ßaƒürƒ±sƒ±
    const groqMessages = [
      {
        role: 'system',
        content: 'Sen OstWindGroup AI asistanƒ±sƒ±n. Kullanƒ±cƒ±ya yardƒ±mcƒ± olan, detaylƒ± ve faydalƒ± yanƒ±tlar veren bir asistansƒ±n. T√ºrk√ße yanƒ±t ver. Kullanƒ±cƒ±nƒ±n √∂nceki mesajlarƒ±nƒ± dikkate al ve konu≈üma baƒülamƒ±nƒ± koru.'
      },
      ...messageHistory.map(msg => ({
        role: msg.role === 'user' ? 'user' : 'assistant',
        content: msg.content
      })),
      {
        role: 'user',
        content: message
      }
    ];

    console.log('ü§ñ Calling Groq API...');
    
    const groqResponse = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${groqApiKey}`
      },
      body: JSON.stringify({
        model: 'llama3-70b-8192',
        messages: groqMessages,
        max_tokens: 2000,
        temperature: 0.8,
        stream: false
      })
    });

    if (!groqResponse.ok) {
      const errorData = await groqResponse.json();
      console.error('‚ùå Groq API error:', errorData);
      
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({
          conversation_id: conversation_id,
          message: "‚ö†Ô∏è AI servisi ge√ßici olarak kullanƒ±lamƒ±yor. L√ºtfen daha sonra tekrar deneyin.",
          timestamp: new Date().toISOString(),
          used_api: 'fallback-api-error'
        }),
      };
    }

    const groqData = await groqResponse.json();
    const aiResponse = groqData.choices[0]?.message?.content || 'Yanƒ±t alƒ±namadƒ±.';

    console.log('‚úÖ Groq API response received');

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        conversation_id: conversation_id,
        message: aiResponse,
        timestamp: new Date().toISOString(),
        used_api: 'groq-llama3-70b'
      }),
    };

  } catch (error) {
    console.error('‚ùå Function error:', error);
    
    // Hata durumunda fallback yanƒ±t
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        conversation_id: conversation_id || 'error',
        message: "‚ö†Ô∏è Bir hata olu≈ütu. L√ºtfen tekrar deneyin.",
        timestamp: new Date().toISOString(),
        used_api: 'fallback-error'
      }),
    };
  }
};