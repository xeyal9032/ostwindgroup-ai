{"ast":null,"code":"import axios from'axios';import{GoogleGenerativeAI}from'@google/generative-ai';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Direct Gemini AI integration for frontend\nconst getGeminiResponse=async message=>{try{const apiKey=process.env.REACT_APP_GOOGLE_AI_API_KEY;if(!apiKey){throw new Error('Google AI API key not found');}const genAI=new GoogleGenerativeAI(apiKey);const model=genAI.getGenerativeModel({model:\"gemini-2.5-flash\"});const prompt=\"Sen OstWindGroup AI, kullan\\u0131c\\u0131lara yard\\u0131mc\\u0131 olan zeki bir asistans\\u0131n. Her zaman T\\xFCrk\\xE7e konu\\u015F ve yard\\u0131mc\\u0131 ol. Kullan\\u0131c\\u0131 mesaj\\u0131: \\\"\".concat(message,\"\\\"\");const result=await model.generateContent(prompt);const response=await result.response;return response.text();}catch(error){console.error('Gemini AI error:',error);return\"\\xDCzg\\xFCn\\xFCm, AI servisinde bir hata olu\\u015Ftu: \".concat(error.message,\". L\\xFCtfen tekrar deneyin.\");}};// API servisleri\nexport const conversationService={// Tüm sohbetleri getir\ngetConversations:async()=>{const response=await api.get('/conversations');return response.data;},// Yeni sohbet oluştur\ncreateConversation:async function(){let title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Yeni Sohbet';const response=await api.post('/conversations',{title});return response.data;},// Sohbet sil\ndeleteConversation:async conversationId=>{const response=await api.delete(\"/conversations/\".concat(conversationId));return response.data;},// Sohbet mesajlarını getir\ngetMessages:async conversationId=>{const response=await api.get(\"/conversations/\".concat(conversationId,\"/messages\"));return response.data;},// Mesaj kaydet\nsaveMessage:async messageData=>{const response=await api.post('/messages',messageData);return response.data;}};export const chatService={// AI ile sohbet et\nsendMessage:async(conversationId,message)=>{console.log('API call - sendMessage:',{conversationId,message});try{// Direct Gemini AI call\nconst aiResponse=await getGeminiResponse(message);const response={conversation_id:conversationId||'conv-'+Date.now(),user_message:{id:'user-'+Date.now(),conversation_id:conversationId||'conv-'+Date.now(),role:'user',content:message,timestamp:new Date().toISOString()},assistant_message:{id:'assistant-'+Date.now(),conversation_id:conversationId||'conv-'+Date.now(),role:'assistant',content:aiResponse,timestamp:new Date().toISOString()}};console.log('API response:',response);return response;}catch(error){console.error('Chat service error:',error);throw error;}}};export default api;","map":{"version":3,"names":["axios","GoogleGenerativeAI","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getGeminiResponse","message","apiKey","REACT_APP_GOOGLE_AI_API_KEY","Error","genAI","model","getGenerativeModel","prompt","concat","result","generateContent","response","text","error","console","conversationService","getConversations","get","data","createConversation","title","arguments","length","undefined","post","deleteConversation","conversationId","delete","getMessages","saveMessage","messageData","chatService","sendMessage","log","aiResponse","conversation_id","Date","now","user_message","id","role","content","timestamp","toISOString","assistant_message"],"sources":["C:/Users/xeyal/Desktop/Ai/app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Direct Gemini AI integration for frontend\nconst getGeminiResponse = async (message) => {\n  try {\n    const apiKey = process.env.REACT_APP_GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Google AI API key not found');\n    }\n    \n    const genAI = new GoogleGenerativeAI(apiKey);\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const prompt = `Sen OstWindGroup AI, kullanıcılara yardımcı olan zeki bir asistansın. Her zaman Türkçe konuş ve yardımcı ol. Kullanıcı mesajı: \"${message}\"`;\n    \n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Gemini AI error:', error);\n    return `Üzgünüm, AI servisinde bir hata oluştu: ${error.message}. Lütfen tekrar deneyin.`;\n  }\n};\n\n// API servisleri\nexport const conversationService = {\n  // Tüm sohbetleri getir\n  getConversations: async () => {\n    const response = await api.get('/conversations');\n    return response.data;\n  },\n\n  // Yeni sohbet oluştur\n  createConversation: async (title = 'Yeni Sohbet') => {\n    const response = await api.post('/conversations', { title });\n    return response.data;\n  },\n\n  // Sohbet sil\n  deleteConversation: async (conversationId) => {\n    const response = await api.delete(`/conversations/${conversationId}`);\n    return response.data;\n  },\n\n  // Sohbet mesajlarını getir\n  getMessages: async (conversationId) => {\n    const response = await api.get(`/conversations/${conversationId}/messages`);\n    return response.data;\n  },\n\n  // Mesaj kaydet\n  saveMessage: async (messageData) => {\n    const response = await api.post('/messages', messageData);\n    return response.data;\n  },\n};\n\nexport const chatService = {\n  // AI ile sohbet et\n  sendMessage: async (conversationId, message) => {\n    console.log('API call - sendMessage:', { conversationId, message });\n    \n    try {\n      // Direct Gemini AI call\n      const aiResponse = await getGeminiResponse(message);\n      \n      const response = {\n        conversation_id: conversationId || 'conv-' + Date.now(),\n        user_message: {\n          id: 'user-' + Date.now(),\n          conversation_id: conversationId || 'conv-' + Date.now(),\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString(),\n        },\n        assistant_message: {\n          id: 'assistant-' + Date.now(),\n          conversation_id: conversationId || 'conv-' + Date.now(),\n          role: 'assistant',\n          content: aiResponse,\n          timestamp: new Date().toISOString(),\n        },\n      };\n      \n      console.log('API response:', response);\n      return response;\n    } catch (error) {\n      console.error('Chat service error:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}