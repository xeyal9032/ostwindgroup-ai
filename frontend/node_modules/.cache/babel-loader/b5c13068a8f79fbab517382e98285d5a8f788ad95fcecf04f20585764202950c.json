{"ast":null,"code":"import axios from'axios';import{GoogleGenerativeAI}from'@google/generative-ai';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Direct Gemini AI integration for frontend\nconst getGeminiResponse=async message=>{try{const apiKey=process.env.REACT_APP_GOOGLE_AI_API_KEY;if(!apiKey){throw new Error('Google AI API key not found');}const genAI=new GoogleGenerativeAI(apiKey);const model=genAI.getGenerativeModel({model:\"gemini-2.5-flash\"});const prompt=\"Sen OstWindGroup AI, kullan\\u0131c\\u0131lara yard\\u0131mc\\u0131 olan zeki bir asistans\\u0131n. Her zaman T\\xFCrk\\xE7e konu\\u015F ve yard\\u0131mc\\u0131 ol. Kullan\\u0131c\\u0131 mesaj\\u0131: \\\"\".concat(message,\"\\\"\");const result=await model.generateContent(prompt);const response=await result.response;return response.text();}catch(error){console.error('Gemini AI error:',error);return\"\\xDCzg\\xFCn\\xFCm, AI servisinde bir hata olu\\u015Ftu: \".concat(error.message,\". L\\xFCtfen tekrar deneyin.\");}};// API servisleri\nexport const conversationService={// Tüm sohbetleri getir\ngetConversations:async()=>{try{const response=await api.get('/conversations');return response.data;}catch(error){console.error('Sohbetler alınamadı:',error);// Mock data döndür\nreturn[{id:'conv-1',title:'Yeni Sohbet',created_at:new Date().toISOString(),updated_at:new Date().toISOString()}];}},// Tek sohbet getir\ngetConversation:async conversationId=>{try{const response=await api.get(\"/conversations/\".concat(conversationId));return response.data;}catch(error){console.error('Sohbet alınamadı:',error);// Mock data döndür\nreturn{id:conversationId,title:'Yeni Sohbet',created_at:new Date().toISOString(),updated_at:new Date().toISOString()};}},// Yeni sohbet oluştur\ncreateConversation:async function(){let title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Yeni Sohbet';try{const response=await api.post('/conversations',{title});return response.data;}catch(error){console.error('Sohbet oluşturulamadı:',error);// Mock data döndür\nreturn{id:'conv-'+Date.now(),title:title,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};}},// Sohbet sil\ndeleteConversation:async conversationId=>{try{const response=await api.delete(\"/conversations/\".concat(conversationId));return response.data;}catch(error){console.error('Sohbet silinemedi:',error);return{success:true};}},// Sohbet mesajlarını getir\ngetMessages:async conversationId=>{try{const response=await api.get(\"/conversations/\".concat(conversationId,\"/messages\"));return response.data;}catch(error){console.error('Mesajlar alınamadı:',error);// Local storage'dan mesajları al\nconst localMessages=JSON.parse(localStorage.getItem('messages')||'{}');return localMessages[conversationId]||[];}},// Mesaj kaydet\nsaveMessage:async messageData=>{try{const response=await api.post('/messages',messageData);return response.data;}catch(error){console.error('Mesaj kaydedilemedi:',error);// Local storage'a kaydet\nconst localMessages=JSON.parse(localStorage.getItem('messages')||'{}');if(!localMessages[messageData.conversation_id]){localMessages[messageData.conversation_id]=[];}localMessages[messageData.conversation_id].push(messageData);localStorage.setItem('messages',JSON.stringify(localMessages));return messageData;}}};export const chatService={// AI ile sohbet et\nsendMessage:async(conversationId,message)=>{console.log('API call - sendMessage:',{conversationId,message});try{// Direct Gemini AI call\nconst aiResponse=await getGeminiResponse(message);const response={conversation_id:conversationId||'conv-'+Date.now(),user_message:{id:'user-'+Date.now(),conversation_id:conversationId||'conv-'+Date.now(),role:'user',content:message,timestamp:new Date().toISOString()},assistant_message:{id:'assistant-'+Date.now(),conversation_id:conversationId||'conv-'+Date.now(),role:'assistant',content:aiResponse,timestamp:new Date().toISOString()}};console.log('API response:',response);return response;}catch(error){console.error('Chat service error:',error);throw error;}}};export default api;","map":{"version":3,"names":["axios","GoogleGenerativeAI","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getGeminiResponse","message","apiKey","REACT_APP_GOOGLE_AI_API_KEY","Error","genAI","model","getGenerativeModel","prompt","concat","result","generateContent","response","text","error","console","conversationService","getConversations","get","data","id","title","created_at","Date","toISOString","updated_at","getConversation","conversationId","createConversation","arguments","length","undefined","post","now","deleteConversation","delete","success","getMessages","localMessages","JSON","parse","localStorage","getItem","saveMessage","messageData","conversation_id","push","setItem","stringify","chatService","sendMessage","log","aiResponse","user_message","role","content","timestamp","assistant_message"],"sources":["C:/Users/xeyal/Desktop/Ai/app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Direct Gemini AI integration for frontend\nconst getGeminiResponse = async (message) => {\n  try {\n    const apiKey = process.env.REACT_APP_GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Google AI API key not found');\n    }\n    \n    const genAI = new GoogleGenerativeAI(apiKey);\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const prompt = `Sen OstWindGroup AI, kullanıcılara yardımcı olan zeki bir asistansın. Her zaman Türkçe konuş ve yardımcı ol. Kullanıcı mesajı: \"${message}\"`;\n    \n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Gemini AI error:', error);\n    return `Üzgünüm, AI servisinde bir hata oluştu: ${error.message}. Lütfen tekrar deneyin.`;\n  }\n};\n\n// API servisleri\nexport const conversationService = {\n  // Tüm sohbetleri getir\n  getConversations: async () => {\n    try {\n      const response = await api.get('/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Sohbetler alınamadı:', error);\n      // Mock data döndür\n      return [\n        {\n          id: 'conv-1',\n          title: 'Yeni Sohbet',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }\n      ];\n    }\n  },\n\n  // Tek sohbet getir\n  getConversation: async (conversationId) => {\n    try {\n      const response = await api.get(`/conversations/${conversationId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Sohbet alınamadı:', error);\n      // Mock data döndür\n      return {\n        id: conversationId,\n        title: 'Yeni Sohbet',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  },\n\n  // Yeni sohbet oluştur\n  createConversation: async (title = 'Yeni Sohbet') => {\n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error('Sohbet oluşturulamadı:', error);\n      // Mock data döndür\n      return {\n        id: 'conv-' + Date.now(),\n        title: title,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  },\n\n  // Sohbet sil\n  deleteConversation: async (conversationId) => {\n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Sohbet silinemedi:', error);\n      return { success: true };\n    }\n  },\n\n  // Sohbet mesajlarını getir\n  getMessages: async (conversationId) => {\n    try {\n      const response = await api.get(`/conversations/${conversationId}/messages`);\n      return response.data;\n    } catch (error) {\n      console.error('Mesajlar alınamadı:', error);\n      // Local storage'dan mesajları al\n      const localMessages = JSON.parse(localStorage.getItem('messages') || '{}');\n      return localMessages[conversationId] || [];\n    }\n  },\n\n  // Mesaj kaydet\n  saveMessage: async (messageData) => {\n    try {\n      const response = await api.post('/messages', messageData);\n      return response.data;\n    } catch (error) {\n      console.error('Mesaj kaydedilemedi:', error);\n      // Local storage'a kaydet\n      const localMessages = JSON.parse(localStorage.getItem('messages') || '{}');\n      if (!localMessages[messageData.conversation_id]) {\n        localMessages[messageData.conversation_id] = [];\n      }\n      localMessages[messageData.conversation_id].push(messageData);\n      localStorage.setItem('messages', JSON.stringify(localMessages));\n      return messageData;\n    }\n  },\n};\n\nexport const chatService = {\n  // AI ile sohbet et\n  sendMessage: async (conversationId, message) => {\n    console.log('API call - sendMessage:', { conversationId, message });\n    \n    try {\n      // Direct Gemini AI call\n      const aiResponse = await getGeminiResponse(message);\n      \n      const response = {\n        conversation_id: conversationId || 'conv-' + Date.now(),\n        user_message: {\n          id: 'user-' + Date.now(),\n          conversation_id: conversationId || 'conv-' + Date.now(),\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString(),\n        },\n        assistant_message: {\n          id: 'assistant-' + Date.now(),\n          conversation_id: conversationId || 'conv-' + Date.now(),\n          role: 'assistant',\n          content: aiResponse,\n          timestamp: new Date().toISOString(),\n        },\n      };\n      \n      console.log('API response:', response);\n      return response;\n    } catch (error) {\n      console.error('Chat service error:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}