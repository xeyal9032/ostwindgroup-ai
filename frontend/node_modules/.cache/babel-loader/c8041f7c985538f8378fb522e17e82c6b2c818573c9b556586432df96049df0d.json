{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'/.netlify/functions';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'},timeout:30000});export const conversationService={getConversations:async()=>{try{const response=await api.get('/conversations');return response.data;}catch(error){console.error('Sohbetler alınamadı:',error);return[{id:'conv-1',title:'Yeni Sohbet',created_at:new Date().toISOString(),updated_at:new Date().toISOString()}];}},createConversation:async function(){let title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Yeni Sohbet';try{const response=await api.post('/conversations',{title});return response.data;}catch(error){console.error('Sohbet oluşturulamadı:',error);return{id:'conv-'+Date.now(),title:title,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};}},deleteConversation:async id=>{try{await api.delete(\"/conversations/\".concat(id));return{success:true};}catch(error){console.error('Sohbet silinemedi:',error);return{success:true};}},getMessages:async conversationId=>{try{const response=await api.get(\"/messages?conversationId=\".concat(conversationId));return response.data;}catch(error){console.error('Mesajlar alınamadı:',error);return[];}}};export const chatService={sendMessage:async(conversationId,message)=>{console.log('API call - sendMessage:',{conversationId,message});try{const response=await api.post('/chat',{conversation_id:conversationId,message:message});console.log('API response:',response.data);return{conversation_id:response.data.conversation_id,message:response.data.message,timestamp:response.data.timestamp};}catch(error){console.error('Chat service error:',error);throw new Error('Mesaj gönderilemedi. Lütfen tekrar deneyin.');}}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","conversationService","getConversations","response","get","data","error","console","id","title","created_at","Date","toISOString","updated_at","createConversation","arguments","length","undefined","post","now","deleteConversation","delete","concat","success","getMessages","conversationId","chatService","sendMessage","message","log","conversation_id","timestamp","Error"],"sources":["C:/Users/xeyal/Desktop/Ai/app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/.netlify/functions';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000,\n});\n\nexport const conversationService = {\n  getConversations: async () => {\n    try {\n      const response = await api.get('/conversations');\n      return response.data;\n    } catch (error) {\n      console.error('Sohbetler alınamadı:', error);\n      return [\n        {\n          id: 'conv-1',\n          title: 'Yeni Sohbet',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }\n      ];\n    }\n  },\n\n  createConversation: async (title = 'Yeni Sohbet') => {\n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error('Sohbet oluşturulamadı:', error);\n      return {\n        id: 'conv-' + Date.now(),\n        title: title,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n    }\n  },\n\n  deleteConversation: async (id) => {\n    try {\n      await api.delete(`/conversations/${id}`);\n      return { success: true };\n    } catch (error) {\n      console.error('Sohbet silinemedi:', error);\n      return { success: true };\n    }\n  },\n\n  getMessages: async (conversationId) => {\n    try {\n      const response = await api.get(`/messages?conversationId=${conversationId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Mesajlar alınamadı:', error);\n      return [];\n    }\n  },\n};\n\nexport const chatService = {\n  sendMessage: async (conversationId, message) => {\n    console.log('API call - sendMessage:', { conversationId, message });\n    \n    try {\n      const response = await api.post('/chat', {\n        conversation_id: conversationId,\n        message: message\n      });\n      \n      console.log('API response:', response.data);\n      return {\n        conversation_id: response.data.conversation_id,\n        message: response.data.message,\n        timestamp: response.data.timestamp\n      };\n    } catch (error) {\n      console.error('Chat service error:', error);\n      throw new Error('Mesaj gönderilemedi. Lütfen tekrar deneyin.');\n    }\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}